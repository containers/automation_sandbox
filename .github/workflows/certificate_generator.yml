# .github/workflows/certificate_generator.yml
name: Generate Contributor Certificate Preview

# This action triggers automatically when a pull request is closed,
# or can be run manually from the Actions tab.
on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      contributor_username:
        description: 'The GitHub username of the contributor'
        required: true
      pr_number:
        description: 'The pull request number'
        required: true

# Permissions needed for this workflow.
permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  screenshot_and_comment:
    # This job runs if the PR was merged or if it's a manual trigger.
    # The logic for first-time contributors is handled in a dedicated step below.
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check if this is the contributor's first merged PR.
      # This step is the source of truth and will control the execution of subsequent steps.
      - name: Check for first merged PR
        id: check_first_pr
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const author = context.payload.pull_request.user.login;
            const query = `repo:${context.repo.owner}/${context.repo.repo} is:pr is:merged author:${author}`;
            
            console.log(`Searching for merged PRs from @${author} with query: "${query}"`);
            
            const result = await github.rest.search.issuesAndPullRequests({ q: query });
            const mergedPRs = result.data.total_count;

            if (mergedPRs === 1) {
              console.log(`SUCCESS: This is the first merged PR from @${author}. Proceeding...`);
              core.setOutput('is_first_pr', 'true');
            } else {
              console.log(`INFO: Skipping certificate generation. @${author} has ${mergedPRs} total merged PRs.`);
              core.setOutput('is_first_pr', 'false');
            }
      
      # Step 2: Checkout the repository containing the certificate HTML file.
      - name: Checkout containers/automation repository
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true' }}
        uses: actions/checkout@v4
        with:
          repository: containers/automation
          path: automation-repo

      # Step 3: Update the HTML file locally
      - name: Update HTML file
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true' }}
        run: |
          HTML_FILE="automation-repo/certificate-generator/certificate_generator.html"
          CONTRIBUTOR_NAME="${{ github.event.inputs.contributor_username || github.event.pull_request.user.login }}"
          PR_NUMBER="${{ github.event.inputs.pr_number || github.event.pull_request.number }}"
          MERGE_DATE=$(date -u +"%B %d, %Y")

          sed -i "/id=\"contributorName\"/s/value=\"[^\"]*\"/value=\"${CONTRIBUTOR_NAME}\"/" ${HTML_FILE} || { echo "ERROR: Failed to update contributor name."; exit 1; }
          sed -i "/id=\"prNumber\"/s/value=\"[^\"]*\"/value=\"#${PR_NUMBER}\"/" ${HTML_FILE} || { echo "ERROR: Failed to update PR number."; exit 1; }
          sed -i "/id=\"mergeDate\"/s/value=\"[^\"]*\"/value=\"${MERGE_DATE}\"/" ${HTML_FILE} || { echo "ERROR: Failed to update merge date."; exit 1; }

      # Step 4: Setup Node.js environment
      - name: Setup Node.js
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 5: Install Puppeteer and embed-images
      - name: Install Puppeteer and embed-images
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true' }}
        run: |
          npm install puppeteer embed-images || { echo "ERROR: Failed to install npm packages."; exit 1; }

      # Step 6: Take a screenshot of the certificate div
      - name: Create and run screenshot script
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true' }}
        run: |
          cat <<'EOF' > screenshot.js
          const puppeteer = require('puppeteer');
          const path = require('path');
          (async () => {
            const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
            const page = await browser.newPage();
            const htmlPath = 'file://' + path.resolve('automation-repo/certificate-generator/certificate_generator.html');
            await page.goto(htmlPath, { waitUntil: 'networkidle0' });
            await page.setViewport({ width: 1080, height: 720 });
            const element = await page.$('#certificatePreview');
            if (!element) {
              console.error('Could not find element #certificatePreview.');
              process.exit(1);
            }
            await element.screenshot({ path: 'certificate.png' });
            await browser.close();
            console.log('Screenshot saved as certificate.png');
          })().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF
          node screenshot.js || { echo "ERROR: Screenshot script failed."; exit 1; }

      # Step 7: Create markdown file and embed image as base64
      - name: Create embedded image markdown
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true' }}
        run: |
          # Check if certificate.png exists
          if [ ! -f "certificate.png" ]; then
            echo "ERROR: certificate.png not found!"
            exit 1
          fi
          
          # Show file info for debugging
          ls -la certificate.png
          
          # Create a simple markdown file with the image reference
          echo "![Certificate Preview](certificate.png)" > certificate_temp.md
          
          # Use embed-images to convert the image to base64 and embed it
          npx embed-images certificate_temp.md -o certificate_embedded.md
          
          # Debug: Show the result
          echo "=== Original markdown ==="
          cat certificate_temp.md
          echo "=== Embedded markdown ==="
          cat certificate_embedded.md
          echo "========================="
          
          # Check if embed-images worked (should contain base64 data)
          if grep -q "data:image" certificate_embedded.md; then
            echo "SUCCESS: embed-images worked correctly"
            cp certificate_embedded.md embedded_image_final.md
          else
            echo "WARNING: embed-images didn't work, falling back to manual base64 conversion"
            # Manual fallback: create base64 embedded image
            BASE64_DATA=$(base64 -w 0 certificate.png)
            echo "<img src=\"data:image/png;base64,${BASE64_DATA}\" alt=\"Certificate Preview\" />" > embedded_image_final.md
          fi
          
          # Store just a flag to indicate we have the embedded image ready
          echo "EMBEDDED_IMAGE_READY=true" >> $GITHUB_ENV

      # Step 8: Comment on Pull Request with embedded image
      - name: Comment with embedded certificate image
        if: ${{ github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              // Read the embedded image from file instead of environment variable
              const embeddedImage = fs.readFileSync('embedded_image_final.md', 'utf8');
              let body;
              
              if (context.eventName === 'workflow_dispatch') {
                // Manual trigger case
                const contributorName = '${{ github.event.inputs.contributor_username }}';
                const prNumber = '${{ github.event.inputs.pr_number }}';
                body = `ðŸ“œ Certificate preview generated for @${contributorName} (PR #${prNumber}):\n\n${embeddedImage}`;
              } else {
                // Auto trigger case for first-time contributors
                const username = '${{ github.event.pull_request.user.login }}';
                body = `ðŸŽ‰ Congratulations on your first merged pull request, @${username}! Thank you for your contribution.\n\nHere's a preview of your certificate:\n\n${embeddedImage}`;
              }
              
              const issueNumber = context.eventName === 'workflow_dispatch' ? 
                parseInt('${{ github.event.inputs.pr_number }}') : 
                context.issue.number;
              
              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body,
              });
            } catch (error) {
              core.setFailed(`ERROR: Failed to comment on PR. Details: ${error.message}`);
            }
      
      # Step 9: Clean up temporary files
      - name: Clean up temporary files
        if: ${{ always() && (github.event_name == 'workflow_dispatch' || steps.check_first_pr.outputs.is_first_pr == 'true') }}
        run: |
          rm -f certificate.png certificate_temp.md certificate_embedded.md embedded_image_final.md
