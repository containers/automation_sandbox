# .github/workflows/certificate_generator.yml
name: Generate Contributor Certificate Preview

# This action triggers automatically when a pull request is closed,
# or can be run manually from the Actions tab.
on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      contributor_username:
        description: 'The GitHub username of the contributor'
        required: true
      pr_number:
        description: 'The pull request number'
        required: true

# Permissions needed for this workflow.
permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  screenshot_and_comment:
    # This job runs if:
    # 1. The event is a manual `workflow_dispatch`.
    # 2. The event is a merged PR from a first-time contributor.
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR') }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository containing the certificate HTML file.
      # This brings the target HTML file into the runner's workspace.
      - name: Checkout containers/automation repository
        uses: actions/checkout@v4
        with:
          repository: containers/automation
          path: automation-repo # Checkout into a specific directory

      # Step 2: Update the HTML file locally
      # This step only runs if the conditions in the job's `if` statement are met.
      - name: Update HTML file
        run: |
          # The path to your HTML file inside the checked-out directory
          HTML_FILE="automation-repo/certificate-generator/certificate_generator.html"

          # Set variables based on the trigger (manual dispatch or pull request)
          CONTRIBUTOR_NAME="${{ github.event.inputs.contributor_username || github.event.pull_request.user.login }}"
          PR_NUMBER="${{ github.event.inputs.pr_number || github.event.pull_request.number }}"

          # Get the current date in a nice format
          MERGE_DATE=$(date -u +"%B %d, %Y")

          # Update the value for the contributor name input, with failure logging.
          sed -i "/id=\"contributorName\"/s/value=\"[^\"]*\"/value=\"${CONTRIBUTOR_NAME}\"/" ${HTML_FILE} || { echo "ERROR: Failed to update contributor name in HTML file."; exit 1; }
          
          # Update the value for the PR number input, with failure logging.
          sed -i "/id=\"prNumber\"/s/value=\"[^\"]*\"/value=\"#${PR_NUMBER}\"/" ${HTML_FILE} || { echo "ERROR: Failed to update PR number in HTML file."; exit 1; }

          # Update the value for the merge date input, with failure logging.
          sed -i "/id=\"mergeDate\"/s/value=\"[^\"]*\"/value=\"${MERGE_DATE}\"/" ${HTML_FILE} || { echo "ERROR: Failed to update merge date in HTML file."; exit 1; }

      # Step 3: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 4: Install Puppeteer
      - name: Install Puppeteer
        run: |
          npm install puppeteer || { echo "ERROR: Failed to install Puppeteer via npm."; exit 1; }

      # Step 5: Take a screenshot of the certificate div
      - name: Create and run screenshot script
        id: screenshot
        run: |
          # Create a separate JavaScript file to run with Node.js. This is cleaner than a long one-liner.
          cat <<'EOF' > screenshot.js
          const puppeteer = require('puppeteer');
          const path = require('path');

          (async () => {
            const browser = await puppeteer.launch({
              args: ['--no-sandbox', '--disable-setuid-sandbox'],
            });
            const page = await browser.newPage();
            const htmlPath = 'file://' + path.resolve('automation-repo/certificate-generator/certificate_generator.html');
            
            console.log(`Navigating to: ${htmlPath}`);
            await page.goto(htmlPath, { waitUntil: 'networkidle0' });
            
            await page.setViewport({ width: 1080, height: 720 });
            
            // Find the specific element to screenshot using its CSS selector.
            console.log('Looking for element #certificatePreview...');
            const element = await page.$('#certificatePreview');
            
            if (!element) {
              console.error('Could not find element with id "certificatePreview". Please ensure it exists in the HTML file.');
              process.exit(1);
            }
            
            console.log('Element found. Taking screenshot...');
            await element.screenshot({ path: 'certificate.png' });
            
            await browser.close();
            console.log('Screenshot taken and saved as certificate.png');
          })().catch(err => {
            console.error('An error occurred during the screenshot process:', err);
            process.exit(1);
          });
          EOF

          # Execute the script and echo a clear error message on failure.
          node screenshot.js || { echo "ERROR: The screenshot script failed to execute."; exit 1; }

      # Step 6: Upload screenshot as a workflow artifact
      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: certificate-preview
          path: certificate.png
          retention-days: 7

      # Step 7: Comment on Pull Request with a link to the artifact
      # This step only runs for the pull_request trigger, not manual runs.
      - name: Comment with link to artifact
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const body = \`ðŸŽ‰ Congratulations on your first merged pull request, @\${{ github.event.pull_request.user.login }}! Thank you for your contribution.\n\nA preview of your certificate has been generated. You can view and download it from the [workflow run artifacts](\${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}).\`;
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body,
              });
            } catch (error) {
              core.setFailed(`ERROR: Failed to comment on the pull request. Details: ${error.message}`);
            }

      # Step 8: Notify if comment is skipped on manual run
      # This step logs that the comment was skipped because the workflow was run manually.
      - name: Notify if comment is skipped
        if: github.event_name == 'workflow_dispatch'
        run: echo "INFO: Skipping comment step because the workflow was triggered manually."

  notify_skip:
    # This job runs only if the main job's conditions for a PR are not met.
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.author_association != 'FIRST_TIME_CONTRIBUTOR' }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify that the action is skipped for a returning contributor
        run: echo "Skipping certificate generation because @${{ github.event.pull_request.user.login }} is not a first-time contributor."




