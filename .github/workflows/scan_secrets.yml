---

name: Scan for secrets leaks and changes

on:
  # Block PR modification of workflow
  pull_request_target:
  push:
  workflow_dispatch:

# N/B: Default write-all permission for pull_request_target
permissions: read-all

jobs:
  scansecrets:
    runs-on: ubuntu-latest
    env:
      # How far back in history to go when scanning a branch/tag
      # This is most significant when scanning vs new release-branches where
      # a new baseline (from gitleaks-report.json) may be required.
      brdepth: 20

      # This isn't available anywhere else more convenient
      default_branch: ${{ github.event.repository.default_branch }}

      # This isn't available anywhere else more convenient (only valid for PRs)
      commit_range: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}

      # GitLeaks container image to use.
      # N/B: Updating this is hard to test, esp. care must be exercised re: new leak-ignore behaviors
      # (example ref: 'Check for inline scan overrides' step below).  Also b/c this workflow is not
      # intended to be used with the 'pull_request' trigger - as doing so defeats gitleaks scan
      # result trustworthiness.
      glfqin: ghcr.io/gitleaks/gitleaks@sha256:e5f6d1a62786affd1abd882ecc73e9353ce78adea1650711f6e351767723712d  # v8.18.0

      # General arguments to pass for all execution contexts
      # Ref: https://github.com/gitleaks/gitleaks#usage
      glargs: >-
        --exit-code=1
        --no-banner
        --redact
        --verbose
        --log-level=debug
        --source=/subject
        --config=/default/.github/gitleaks.toml
        --report-path=/report/gitleaks-report.json
        --baseline-path=/default/.github/gitleaks-baseline.json
    steps:
      - name: Define git log command and options for re-use
        id: gitlog
        shell: bash
        run: |
          set -exuo pipefail
          echo "cmd=git -C ${{ github.workspace }}/_subject log -p -U0" >> $GITHUB_OUTPUT

          if [[ "${{ github.base_ref }}" == "" ]]; then  # It's a branch/tag
            echo "opts=-${{ env.brdepth }}" >> $GITHUB_OUTPUT
          else  # It's a PR
            echo "opts=${{ env.commit_range }}" >> $GITHUB_OUTPUT
          fi

      - name: Show important context details
        shell: bash
        run: |
          set -euo pipefail
          echo "The github.base_ref value is '${{ github.base_ref }}'"
          echo "The default branch is '${{ env.default_branch }}'"
          echo "The branch depth value is '${{ env.brdepth }}'"
          echo "The PR commit range is '${{ env.commit_range }}'"
          echo "The gitlog cmd value is '${{ steps.gitlog.outputs.cmd }}'"
          echo "The gitlog opts value is '${{ steps.gitlog.outputs.opts }}'"
          echo "The workspace path is '${{ github.workspace }}'"
          echo "::group::The trigger event JSON"
          jq --color-output --indent 2 . $GITHUB_EVENT_PATH
          echo "::endgroup::"

      # N/B: Use "_" prefixed paths to (somewhat) guard against clashes.  GHA has some
      # non-POLA behaviors WRT `${{ github.workspace }}` + checkout action.
      - name: Checkout PR
        if: github.base_ref != ''
        uses: actions/checkout@v3
        with:
          path: _subject
          # Don't assume the number of commits in a hostile-PR, get everything.
          fetch-depth: 0

      - name: Checkout Branch/Tag
        if: github.base_ref == ''
        uses: actions/checkout@v3
        with:
          path: _subject
          fetch-depth: ${{ env.brdepth }}

      # Trusted source of gitleaks config.
      - name: Checkout default branch
        uses: actions/checkout@v3
        with:
          ref: ${{ env.default_branch }}
          path: _default
          fetch-depth: 1

      - name: Create report directory
        shell: bash
        run: |
          set -exuo pipefail
          mkdir ${{ github.workspace }}/_report
          touch ${{ github.workspace }}/_report/gitleaks-report.json
          # TODO: Gitleaks throws permission-denied errors w/o world-execute/write, no idea why.
          chmod 0777 ${{ github.workspace }}/_report
          chmod 0666 ${{ github.workspace }}/_report/gitleaks-report.json

      # A force-push to a PR can obscure Cirrus-CI logs, but not GHA logs
      - name: Show content being scanned
        id: gitlogcmd
        shell: bash
        run: |
          set -exuo pipefail
          ${{ steps.gitlog.outputs.cmd }} ${{ steps.gitlog.outputs.opts }}

      - name: Check for inline scan overrides
        if: github.base_ref != ''  # A PR
        shell: bash
        env:
          # Workaround erronously detecting the string in this file
          _rx1: "gitleaks"
          _rx2: ":"
          _rx3: "allow"
        run: |
          set -euo pipefail
          verboten_rx="${_rx1}${_rx2}${_rx3}"
          verboten=$(set -x ; ${{ steps.gitlog.outputs.cmd }} "-G$verboten_rx" ${{ steps.gitlog.outputs.opts }})
          if [[ -n "$verboten" ]]; then
            printf '::error::%s' 'Found in-line comment(s) detection override (see job log for details)'
            # Hack: Grep will never colorize an end of a line match
            echo "$verboten" | grep --color=always -E "($verboten_rx)|$"
            exit 1
          fi

          if [[ -r "${{ github.workspace }}/_subject/.gitleaksignore" ]]; then
            printf '::error::%s' 'Detected a .gitleaksignore file from untrusted source.'
            exit 1
          fi

      - name: Scan for secrets
        shell: bash
        run: |
          set -exuo pipefail
          podman run \
            -v ${{ github.workspace }}/_default:/default:ro \
            -v ${{ github.workspace }}/_subject:/subject:ro \
            -v ${{ github.workspace }}/_report:/report:rw \
            $glfqin \
            detect $glargs --log-opts=${{ steps.gitlog.outputs.opts }}

      - name: Collect scan report artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-report
          path: ${{ github.workspace }}/_report/gitleaks-report.json
